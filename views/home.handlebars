


<!-- views/signin.handlebars -->
<div class="container vertical-center">
  <div class="container text-center">
    <h1>Please Enter</h1>
    <div class="span2">
      <a href="/auth/google" class="btn btn-danger btn-block" role="button">
        <span class="glyphicon glyphicon-user"></span> LogIn with Google
      </a>
      
      <a href="/auth/facebook" class="btn btn-primary btn-block" role="button">
        <span class="glyphicon glyphicon-user"></span> LogIn with Facebook
      </a>

      <a data-toggle="collapse" href="#videoCam" class="btn btn-warning btn-block" role="button">
        <span class="glyphicon glyphicon-user"></span> LogIn with Camera
      </a>
      <div id="videoCam" class="collapse container btn-warning" >
        <video class="camera" src=""></video>
      </div>      

      <!--
      <a data-toggle="collapse" href="#local" class="btn btn-warning btn-block" role="button"><span class="glyphicon glyphicon-user"></span> LogIn with Email</a>
      <form id="local" class="collapse container btn-warning" action="/login" method="post">
        <div class="form-group">
          <label for="username">Email address</label>
          <input type="email" class="form-control" name="username" placeholder="Email">
        </div>
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" class="form-control" name="password" placeholder="Password">
        </div>
        <div>
            <input type="submit" class="btn btn-primary btn-sm" value="Log In"/>
        </div>
      </form>
      -->
    </div>

  </div>
</div>
<canvas id="canvas"></canvas>
<div id="marco"></div>


<script>
  var cameraStream, 
      videoSource, 
      detector,
      detections;

  var videObj = $('video');
  var video = videObj.get(0);
  var canvas = $('#canvas');
  var marco = $('#marco');

  var kairos = new Kairos("718f44d1", "28c7adf1ebe94442503a0559c506d819");

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

  if (typeof MediaStreamTrack === 'undefined' || typeof MediaStreamTrack.getSources === 'undefined') {
    alert('This browser does not support MediaStreamTrack.\n\nTry Chrome.');
  } 
  else {
    MediaStreamTrack.getSources(gotSources);
  }

  $('#videoCam').on('shown.bs.collapse', startCamera);
  $('#videoCam').on('hidden.bs.collapse', stopCamera);

  function stopCamera(){
    if (cameraStream) {
      video.src = null;
      cameraStream.getTracks()[0].stop();
    }
  };

  function gotSources(sourceInfos) {
    for(var i = 0; i < sourceInfos.length; i++) {
      var si = sourceInfos[i];

      if(si.kind === 'video') {
        videoSource = si.label || 'camera 1';
        break;
      }
    }
  }

  function startCamera() {
    var constraints = {
      video: {
        optional: [{
          sourceId: videoSource
        }]
      }
    };

    detections = 0;
    navigator.getUserMedia(constraints, successCallback, errorCallback);
  }
    
  function successCallback(stream) {
    var url = window.webkitURL || window.URL;
    cameraStream = stream; 

    if (url) {
        video.src = url.createObjectURL(stream);
    } else {
        video.src = stream;
    }

    video.play();
    setTimeout(captureFace,3000);
  }

  function errorCallback(error) {
    console.log('navigator.getUserMedia error: ', error);
  }

  function sendImageToServer(){
    var base64_image = canvas.get(0).toDataURL();
    
    $.ajax({
      type: 'POST',
      url: '/cameraLogin',
      data: { 
        'avatar': base64_image
      },
      success: function(msg){
        window.location.href = '/games'
        console.log('posted', msg);
      }
    });
    //Kairos upload
    /*
    var base64_data = base64_image.replace(/^data:image\/(png|jpg);base64,/, "");
    var subject_id  = 'camerauser';
    var gallery_id  = 'learningames';

    kairos.enroll(base64_data, gallery_id, subject_id, function(response){
      console.log('response', response);
    });
    */
  }
  //objectdetect
  function captureFace(){
    var terminated;
    if (video.readyState === video.HAVE_ENOUGH_DATA && video.videoWidth > 0) {
            
      if (!detector) {
        var width = ~~(60 * video.videoWidth / video.videoHeight);
        var height = 60;
        detector = new objectdetect.detector(width, height, 1.1, objectdetect.frontalface_alt);
      }
            
      var coords = detector.detect(video, 1);

      if (coords[0]) {
        var clip = coords[0];
        var scaleX = videObj.width()/video.videoWidth;
        var pos = videObj.offset();
        var aspectX = video.videoWidth / detector.canvas.width;
        var aspectY = video.videoHeight / detector.canvas.height;
        
        clip[0] *= aspectX*0.9;
        clip[1] *= aspectY*0.9;
        clip[2] *= aspectX*1.2;
        clip[3] *= aspectY*1.2;

        /*
        clip[0] -= 10;
        clip[1] -= 10;
        clip[2] += 20;
        clip[3] += 20;
        */
       
        marco.show();
        marco.offset({left:clip[0]*scaleX + pos.left,top:clip[1]*scaleX + pos.top})
        marco.width(clip[2]*scaleX);
        marco.height(clip[3]*scaleX);
        
        if(detections++ == 13){
          terminated = true;          

          canvas.get(0).getContext('2d').clearRect(0,0,canvas.width(),canvas.height())
          canvas.get(0).width = clip[2];
          canvas.get(0).height = clip[3];
          canvas.get(0).getContext('2d').drawImage(video, clip[0],clip[1],clip[2],clip[3], 0, 0, clip[2], clip[3]);
          
          sendImageToServer();
        }
      }
    }
    if(!terminated){
      window.requestAnimationFrame(captureFace);      
    }
  }
</script>
